#!/bin/sh

#shellcheck disable=SC2154

# most important variables.
VERSION="3.0.5"
CHANNEL="main"
base_url="https://embasic.pro"
logdir="${XDG_CACHE_HOME:-$HOME/.cache}"
logfile="$logdir/dra-hsts"
quality=best
scrape=query
agent="Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/13$(head -5 /dev/urandom | tr -dc '0-5' | cut -c1).0.0.0 Safari/537.36"
trap 'rm -f '"$logfile"'.new' INT HUP

############
#   help   #
############

help_text() {
	while IFS= read -r line; do
		printf "%s\n" "$line"
	done <<-EOF

		Usage:
		  ${0##*/} [-v] [-q <quality>] [-a <episode>] [-d | -p <download_dir>] [<query>]
		  ${0##*/} [-v] [-q <quality>] -c
		  ${0##*/} -h | -U | -V

		Options:
		  -c continue watching drama from history
		  -a specify episode to watch
		  -h show helptext
		  -d download episode
		  -p download episode to specified directory
		  -q set video quality (best|worst|360|480|720|1080)
		  -v use VLC as the media player
		  -D Delete Entire history
		  -U fetch update from github
		  -V print version number and exit

		Episode selection:
		  Multiple episodes can be chosen given a range
		    Choose episode [1-13]: 1 6
		    This would choose episodes 1 2 3 4 5 6

		    When selecting non-interactively (eg: -a <ep_no>), the first result will be
		  selected, if drama is passed as Args
	EOF
}

############
#  Update  #
############

update_script() {
	log "Checking For Updates.." >&2
	update="$(curl -A "$agent" -s "https://raw.githubusercontent.com/CoolnsX/dra-cla/$CHANNEL/dra-cla" | diff -u "$0" -)"
	if [ -z "$update" ]; then
		log "Script is up to date :)\n" "32" >&2
		exit 0
	fi
	#dry run
	if [ "$1" -eq 0 ]; then
		log "Update Available!!\n" "32" >&2
		log "To Update, type: ${sudo}${0##*/} -U" "33" >&2
		exit 0
	fi
	#warning: this updates the codebase of script.
	if printf '%s\n' "$update" | patch "$0" -; then
		log "Script has been updated\n" "32" >&2
		exit 0
	else
		log "Can't update for some reason!\n" "31" >&2
		exit 1
	fi
}

############
#    UI    #
############

log() {
	#shellcheck disable=SC2059
	printf "\033[2K\r\033[1;${2:-36}m${1}\033[0m"
}

menu() {
	fzf --prompt="$1 >> " --layout=reverse --border --height=20 -0 -1 -m
}

ask() {
	log "$1" "33"
}

#############
#   Logic   #
#############

dep_ch() {
	for dep in $(printf "%s" "$1" | tr ' ' '\n'); do
		command -v "$dep" >/dev/null || {
			log "Program $dep not found. Please install it\n" "31"
			[ "$dep" = "aria2c" ] && log "To install $dep, Type <your_package_manager> aria2" "32"
			exit 1
		}
	done
}

where_iina() {
    [ -e "/Applications/IINA.app/Contents/MacOS/iina-cli" ] && echo "/Applications/IINA.app/Contents/MacOS/iina-cli" && return 0
    printf "%s" "iina" && return 0
}

where_mpv() {
    command -v mpv || echo "mpv"
}

download() {
	case "$1" in
		*m3u8*)
			log "Fetching Metadata"
			data=$(curl -s -A "$agent" "$1" | sed '/#/d')
			printf '%s' "$data" | nl -n'rz' | sed -E "s|^([0-9]*)[[:space:]]*(.*)|${3}\2\n\tout=\1.ts|g" | aria2c -x16 -s16 -j50 -d "$logdir/dra-hls" -i - --download-result=hide --summary-interval=0 --allow-overwrite=true
			log "\nConcatenating Pieces..\n"
			cat "$logdir/dra-hls"/* | ffmpeg -loglevel error -stats -i - -c copy "$download_dir/$2.mp4" -y
			rm -f "$logdir/dra-hls"/*
			;;
		*)
			aria2c --enable-rpc=false --check-certificate=false --continue --summary-interval=0 -x16 -s16 "$1" --dir="$download_dir" -o "$2.mp4" --download-result=hide
			;;
	esac
	tput clear
	log "Downloaded $2/$4"
}

open_episode() {
	tput clear
	log "Fetching $title Episode $episode.."
	[ -z "$dpage_link" ] && dpage_link=$(curl -s -A "$agent" "$base_url/videos/${id}${episode}" | sed -nE 's_^[[:space:]]*<iframe src="([^"]*)".*_https:\1_p')
	providers_link="$(curl -s "$dpage_link" -A "$agent" | sed -nE 's|.*data-provider="([^"]*)" data-video="([^"]*)".*|\1>\2|p')"
	for provider in streamwish vidhide main; do
		log "Fetching $provider links.."
		get_video_url
		[ -n "$video_link" ] && break
	done
	if grep -q "$id" "$logfile"; then
		sed -E "s/^${id}.*/${id}$((episode + 1))/" "$logfile" >"${logfile}.new"
	else
		printf "%s%s\n" "$id" "$((episode + 1))" >>"$logfile"
	fi
	[ -z "$video_link" ] && log "Video URL not found" "31"
	[ "$player_function" = "download" ] && display="Downloading" || display="Streaming"
	log "$display $title Episode $episode/$total_eps\n" "32"
	[ -z "$nohup" ] && ! printf "%s" "$player_function" | grep -q "android" && log "To play next Episode, quit the player."

	#media Player
	case "$player_function" in
		mpv*)
			if [ -z "$nohup" ]; then
				$player_function --force-media-title="${title} Episode ${episode}" "$video_link" >/dev/null 2>&1
			else
				$nohup "$player_function" --force-media-title="${title} Episode ${episode}" "$video_link" >/dev/null 2>&1 &
			fi
			;;
		android_mpv) am start --user 0 -a android.intent.action.VIEW -d "$video_link" -n is.xyz.mpv/.MPVActivity >/dev/null 2>&1 ;;
		vlc*)
			if [ -z "$nohup" ]; then
				$player_function --play-and-exit --meta-title="${title} Episode ${episode}" "$video_link" >/dev/null 2>&1
			else
				$nohup "$player_function" --play-and-exit --meta-title="${title} Episode ${episode}" "$video_link" >/dev/null 2>&1 &
			fi
			;;
		android_vlc) am start --user 0 -a android.intent.action.VIEW -d "$video_link" -n org.videolan.vlc/org.videolan.vlc.gui.video.VideoPlayerActivity -e "title" "${title} Episode ${episode}" >/dev/null 2>&1 ;;
		*IINA*) 
			if [ -z "$nohup" ]; then
				$player_function --no-plugins "$video_link" >/dev/null 2>&1
			else
				$nohup "$player_function" --no-plugins "$video_link" >/dev/null 2>&1 &
			fi
			;;
		*)
			log "Unsupported player. Exiting.." "31"
			exit 1
			;;
	esac
}

select_player() {
	case $(uname) in
		Darwin)
			# macOS: Check for IINA and MPV
			player_function=$(where_iina)
			;;
		Linux)
			# Linux: Default to MPV if available
			player_function=$(where_mpv)
			;;
		*)
			log "Unsupported platform. Exiting.." "31"
			exit 1
			;;
	esac
}

main() {
	# Select the appropriate media player based on the platform
	select_player

	# Handle other options...
}

main "$@"
